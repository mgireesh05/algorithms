# def naive_implementation(arr):
# 	i = 0
# 	j = 0
# 	count = 0
# 	for i in range(0, len(arr)-1):
# 		j = i + 1
# 		for j in range(j, len(arr)):
# 			if arr[i] > arr[j]:
# 				count = count + 1
# 	return count

"""
Naive implementation takes O(n^2) whereas an extension of mergesort can do this in O(n log n)
"""
def count_inversions(arr):
	
	count, arr = sort_and_count(arr)

	print("Count:", count)
	return count

def sort_and_count(arr):

	if len(arr) <= 1:
		return 0, arr

	left = arr[:len(arr)/2]
	right = arr[len(arr)/2:]
	ret = []
	count = 0

	if len(left) == 1 and len(right) == 1:
		if left[0] <= right[0]:
			ret.append(left[0])
			ret.append(right[0])
		else:
			ret.append(right[0])
			ret.append(left[0])
			count = count + 1
		return count, ret

	if(len(left) != 0):
		level_count, left = sort_and_count(left)
		count = count + level_count

	if(len(right) != 0):
		level_count, right = sort_and_count(right)
		count = count + level_count

	level_count, merge = sort_count_and_merge(left, right)
	return count + level_count, merge

def sort_count_and_merge(left, right):	
	ret = []
	i = 0
	j = 0
	count = 0

	while i < len(left) and j < len(right):
		if left[i] <= right[j]:
			ret.append(left[i])
			i = i + 1
		else:
			ret.append(right[j])
			j = j + 1
			count = count + len(left) - i

	while i < len(left):
		ret.append(left[i])
		i = i + 1

	while j < len(right):
		ret.append(right[j])
		j = j + 1

	return count, ret



arr = [3, 2, 8, 7]
count = count_inversions(arr)
assert (count == 2), "Inversions = %r is wrong!" % count 

arr = [1, 5, 3, 2, 4]
count = count_inversions(arr)
assert (count == 4), "Inversions = %r is wrong!" % count 

arr = [5, 4, 3, 2, 1]
count = count_inversions(arr)
assert (count == 10), "Inversions = %r is wrong!" % count 

arr = [1, 6, 3, 2, 4, 5]
count = count_inversions(arr)
assert (count == 5), "Inversions = %r is wrong!" % count 

arr = [3, 1, 5, 2, 7, 6, 4]
count = count_inversions(arr)
assert (count == 7), "Inversions = %r is wrong!" % count

arr = [9, 12, 3, 1, 6, 8, 2, 5, 14, 13, 11, 7, 10, 4, 0]
count = count_inversions(arr)
assert (count == 56), "Inversions = %r is wrong!" % count 

arr = [37, 7, 2, 14, 35, 47, 10, 24, 44, 17, 34, 11, 16, 48, 1, 39, 6, 33, 43, 26, 40, 4, 28, 5, 38, 41, 42, 12, 13, 21, 29, 18, 3, 19, 0, 32, 46, 27, 31, 25, 15, 36, 20, 8, 9, 49, 22, 23, 30, 45]
count = count_inversions(arr)
assert (count == 590), "Inversions = %r is wrong!" % count

arr = [4, 80, 70, 23, 9, 60, 68, 27, 66, 78, 12, 40, 52, 53, 44, 8, 49, 28, 18, 46, 21, 39, 51, 7, 87, 99, 69, 62, 84, 6, 79, 67, 14, 98, 83, 0, 96, 5, 82, 10, 26, 48, 3, 2, 15, 92, 11, 55, 63, 97, 43, 45, 81, 42, 95, 20, 25, 74, 24, 72, 91, 35, 86, 19, 75, 58, 71, 47, 76, 59, 64, 93, 17, 50, 56, 94, 90, 89, 32, 37, 34, 65, 1, 73, 41, 36, 57, 77, 30, 22, 13, 29, 38, 16, 88, 61, 31, 85, 33, 54]
count = count_inversions(arr)
assert (count == 2372), "Inversions = %r is wrong!" % count

arr = [769, 721, 114, 908, 208, 17, 636, 445, 110, 192, 6, 261, 520, 716, 472, 532, 476, 157, 118, 253, 448, 629, 362, 159, 454, 660, 105, 895, 288, 502, 46, 573, 1000, 948, 171, 185, 354, 943, 512, 495, 675, 777, 233, 957, 514, 389, 439, 366, 390, 308, 231, 62, 277, 776, 557, 600, 715, 667, 666, 609, 912, 554, 782, 796, 432, 361, 379, 128, 739, 347, 850, 763, 945, 566, 693, 321, 534, 953, 227, 95, 293, 139, 146, 682, 673, 606, 377, 50, 68, 224, 500, 870, 376, 518, 203, 767, 221, 468, 800, 165, 246, 92, 789, 729, 883, 931, 326, 748, 563, 177, 874, 294, 829, 310, 814, 112, 627, 944, 523, 34, 892, 841, 599, 38, 871, 508, 375, 592, 723, 477, 699, 287, 284, 53, 416, 199, 272, 437, 656, 595, 845, 714, 788, 546, 142, 89, 478, 738, 940, 426, 589, 237, 762, 982, 441, 958, 728, 168, 364, 239, 258, 878, 759, 303, 815, 24, 458, 704, 330, 758, 865, 98, 195, 651, 827, 473, 754, 355, 640, 801, 774, 887, 578, 598, 184, 285, 923, 230, 921, 768, 517, 161, 493, 186, 30, 398, 604, 807, 641, 610, 794, 490, 222, 268, 885, 300, 219, 198, 881, 553, 942, 696, 66, 122, 150, 984, 897, 106, 450, 620, 357, 896, 372, 96, 4, 939, 527, 381, 386, 858, 117, 622, 976, 504, 740, 541, 234, 531, 149, 562, 621, 572, 124, 596, 625, 61, 977, 941, 631, 601, 462, 81, 820, 174, 327, 440, 144, 713, 126, 586, 229, 27, 798, 664, 322, 332, 63, 247, 57, 380, 5, 694, 402, 647, 938, 574, 317, 851, 860, 749, 913, 678, 45, 637, 395, 200, 570, 172, 59, 492, 324, 677, 658, 497, 407, 190, 346, 453, 936, 718, 926, 593, 588, 712, 257, 784, 183, 136, 792, 189, 856, 304, 663, 786, 590, 687, 549, 413, 91, 487, 956, 423, 442, 206, 507, 455, 191, 679, 929, 970, 701, 511, 37, 341, 132, 99, 397, 986, 972, 683, 536, 857, 162, 732, 924, 545, 438, 995, 817, 356, 86, 242, 383, 872, 69, 243, 551, 809, 808, 778, 780, 163, 43, 752, 1, 481, 731, 158, 741, 603, 39, 602, 877, 244, 35, 180, 167, 329, 342, 18, 873, 555, 131, 33, 494, 2, 115, 238, 535, 107, 530, 446, 540, 436, 909, 559, 630, 421, 213, 700, 435, 58, 928, 264, 686, 457, 204, 286, 29, 138, 839, 840, 365, 412, 915, 802, 803, 182, 624, 615, 611, 251, 787, 369, 822, 644, 40, 703, 25, 88, 151, 950, 466, 282, 283, 12, 951, 558, 134, 898, 911, 648, 722, 812, 819, 842, 121, 583, 77, 717, 394, 56, 41, 404, 11, 742, 100, 724, 954, 836, 60, 259, 934, 484, 576, 634, 935, 447, 374, 32, 847, 84, 526, 725, 47, 210, 869, 235, 510, 864, 900, 21, 101, 799, 868, 240, 521, 584, 80, 737, 419, 685, 585, 266, 498, 765, 36, 22, 400, 85, 973, 422, 503, 488, 109, 581, 79, 175, 657, 3, 708, 207, 761, 914, 922, 795, 846, 702, 271, 19, 463, 255, 338, 54, 989, 408, 918, 960, 661, 904, 331, 486, 279, 643, 459, 391, 835, 594, 582, 388, 862, 832, 966, 711, 963, 879, 298, 859, 392, 886, 513, 680, 318, 373, 409, 916, 764, 176, 833, 524, 133, 343, 249, 519, 67, 154, 645, 844, 930, 525, 461, 13, 902, 772, 876, 705, 120, 959, 706, 323, 26, 430, 316, 988, 564, 974, 363, 659, 123, 632, 290, 612, 401, 328, 367, 990, 903, 78, 289, 821, 248, 434, 843, 983, 113, 947, 334, 826, 360, 747, 319, 633, 429, 639, 975, 971, 314, 491, 597, 387, 108, 483, 456, 278, 733, 968, 669, 688, 672, 465, 707, 211, 152, 605, 281, 969, 427, 755, 403, 415, 254, 791, 538, 358, 267, 475, 797, 901, 225, 52, 263, 552, 580, 964, 650, 516, 145, 985, 270, 368, 849, 228, 135, 226, 320, 556, 561, 496, 499, 339, 187, 919, 719, 48, 670, 550, 23, 97, 471, 333, 75, 730, 906, 635, 336, 980, 292, 280, 232, 130, 166, 952, 125, 301, 751, 894, 852, 460, 420, 215, 652, 781, 181, 771, 734, 273, 783, 560, 350, 501, 153, 569, 689, 773, 617, 212, 998, 349, 920, 325, 528, 311, 753, 978, 74, 164, 351, 296, 102, 756, 236, 770, 987, 178, 854, 889, 265, 90, 55, 141, 655, 710, 28, 818, 691, 544, 140, 129, 127, 15, 250, 743, 307, 169, 505, 529, 766, 993, 750, 83, 218, 193, 642, 515, 890, 345, 810, 547, 312, 614, 42, 880, 216, 608, 867, 668, 425, 410, 205, 855, 823, 882, 709, 607, 779, 775, 470, 241, 674, 137, 173, 893, 698, 256, 384, 469, 433, 727, 619, 690, 745, 82, 449, 485, 309, 313, 961, 116, 695, 676, 891, 359, 424, 587, 340, 188, 805, 155, 220, 276, 417, 837, 452, 937, 760, 147, 506, 451, 428, 949, 370, 697, 967, 736, 156, 816, 785, 10, 905, 996, 726, 539, 393, 991, 480, 946, 917, 382, 9, 999, 567, 414, 245, 907, 684, 16, 720, 406, 962, 209, 411, 925, 143, 464, 418, 31, 853, 119, 344, 692, 305, 806, 888, 828, 997, 681, 72, 509, 571, 875, 170, 831, 252, 160, 910, 104, 337, 223, 274, 405, 565, 474, 623, 76, 646, 482, 933, 51, 87, 479, 618, 8, 804, 202, 44, 353, 979, 148, 260, 348, 194, 981, 371, 994, 378, 543, 533, 654, 824, 431, 861, 297, 70, 793, 830, 315, 103, 735, 757, 295, 665, 217, 65, 575, 790, 662, 262, 834, 542, 616, 744, 14, 467, 269, 653, 399, 591, 825, 179, 306, 111, 73, 568, 965, 899, 927, 671, 71, 628, 863, 613, 649, 838, 201, 884, 275, 385, 214, 299, 537, 7, 489, 813, 196, 548, 992, 443, 746, 848, 20, 49, 522, 932, 291, 93, 638, 866, 396, 444, 94, 579, 811, 352, 64, 302, 197, 626, 335, 955, 577]
count = count_inversions(arr)
assert (count == 246856), "Inversions = %r is wrong!" % count

input_file = open("input.txt")
arr = input_file.readlines()
arr = [int(x.strip()) for x in arr] #Make sure to convert the read line to int, otherwise the answer won't be correct
count = count_inversions(arr)
assert (count == 2461), "Inversions = %r is wrong!" % count

print "All tests passed!!!"